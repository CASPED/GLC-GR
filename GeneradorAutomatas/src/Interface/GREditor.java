/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Saul
 */
public class GREditor extends javax.swing.JFrame {

    /**
     * Creates new form GREditor
     */
    HashMap<String, ArrayList<String>> listaPrincipal; //valores key como Noterminales y su AL de terminales

    ArrayList<String> noTerminales;
    ArrayList<String> terminales;
    StringBuffer bfIn;
    char epsilon = 'E';

    public GREditor() {
        initComponents();
        setTitle("GR");
        setBounds(800, 400, 435, 345);
        noTerminales = new ArrayList<>();
        terminales = new ArrayList<>();
        bfIn = new StringBuffer();
        listaPrincipal = new HashMap<>(); // vacia
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAEFD = new javax.swing.JButton();
        buttonAEFND = new javax.swing.JButton();
        buttonER = new javax.swing.JButton();
        btnGrabar = new javax.swing.JButton();
        btnRecuperar = new javax.swing.JButton();
        btnVerificar = new javax.swing.JButton();
        txtnoTerminal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTerminales = new javax.swing.JTextField();
        btnAniadir = new javax.swing.JButton();
        bttNuevo = new javax.swing.JButton();
        btnTerminal = new javax.swing.JButton();
        btnNoTerminales = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMain = new javax.swing.JTextPane();
        TxtCorrector = new javax.swing.JLabel();

        buttonAEFD.setText("AEFD");
        buttonAEFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAEFDActionPerformed(evt);
            }
        });

        buttonAEFND.setText("AEFND");
        buttonAEFND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAEFNDActionPerformed(evt);
            }
        });

        buttonER.setText("AEFND");
        buttonER.setActionCommand("ER");
        buttonER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonERActionPerformed(evt);
            }
        });

        btnGrabar.setText("GRABAR");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        btnRecuperar.setText("RECUPERAR");
        btnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecuperarActionPerformed(evt);
            }
        });

        btnVerificar.setText("VERIFICAR");
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarActionPerformed(evt);
            }
        });

        txtnoTerminal.setText("T");
        txtnoTerminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnoTerminalActionPerformed(evt);
            }
        });

        jLabel3.setText("--->");

        txtTerminales.setText("A b c d");

        btnAniadir.setText("+");
        btnAniadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAniadirActionPerformed(evt);
            }
        });

        bttNuevo.setText("Nuevo");
        bttNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttNuevoActionPerformed(evt);
            }
        });

        btnTerminal.setText("TERMINAL");
        btnTerminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminalActionPerformed(evt);
            }
        });

        btnNoTerminales.setText("NO TERMINAL");
        btnNoTerminales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoTerminalesActionPerformed(evt);
            }
        });

        jLabel1.setText("No terminal");

        jLabel2.setText("cadena (utilizar espacio)");

        jScrollPane1.setViewportView(txtMain);

        TxtCorrector.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtnoTerminal)
                            .addComponent(buttonAEFD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonAEFND)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonER))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTerminales, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnVerificar)
                                        .addComponent(btnNoTerminales, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(TxtCorrector, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAniadir)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bttNuevo))))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnGrabar)
                            .addGap(40, 40, 40)
                            .addComponent(btnRecuperar))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAEFD)
                    .addComponent(buttonAEFND)
                    .addComponent(buttonER))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtnoTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtTerminales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtCorrector))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGrabar)
                            .addComponent(btnRecuperar)
                            .addComponent(btnVerificar))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAniadir)
                                .addComponent(bttNuevo))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(btnTerminal)
                                .addGap(18, 18, 18)
                                .addComponent(btnNoTerminales)))
                        .addContainerGap(107, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAEFNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAEFNDActionPerformed
        showAFND automatasNoDeterministicos = new showAFND(listaPrincipal);
        try {
            automatasNoDeterministicos.View();
        } catch (InterruptedException ex) {
            Logger.getLogger(GREditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAEFNDActionPerformed

    private void buttonERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonERActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonERActionPerformed

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        File crearArchivo;
        FileWriter escribirDatos;
        BufferedWriter bw;
        PrintWriter wr;

        try {
            crearArchivo = new File("Gramatica Guardadas2.txt");
            escribirDatos = new FileWriter(crearArchivo);
            bw = new BufferedWriter(escribirDatos);
            wr = new PrintWriter(crearArchivo);

            wr.write(txtMain.getText());
            wr.append("");

            wr.close();
            bw.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error " + e);
        }
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void btnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecuperarActionPerformed
        reiniciar();
        String direccion = "Gramatica Guardadas2.txt";
        File archivo = new File(direccion);
        //System.out.println(archivo.getAbsolutePath());

        try {
            BufferedReader leer = new BufferedReader(new FileReader(archivo));
            String linea = leer.readLine();
            String aux = "";
            while (linea != null) {
                String aux2[] = linea.split("---->");
                if (aux2.length > 1) {
                    anadir(aux2[0], aux2[1]);
                }
                aux += linea + "\n";
                linea = leer.readLine();
            }
            txtMain.setText(aux);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error " + e);
        }
    }//GEN-LAST:event_btnRecuperarActionPerformed

    private void reiniciar() {
        // Borra todos los datos actuales
        bfIn = new StringBuffer();
        txtMain.setText(bfIn.toString());
        txtTerminales.setText("");
        txtnoTerminal.setText("");
        listaPrincipal = new HashMap<>();
        terminales.clear();
        noTerminales.clear();
    }

    private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarActionPerformed
        obtenerNoTerminales();
        obtenerTerminales();
        boolean res = true;
        for (Map.Entry<String, ArrayList<String>> entrySet : listaPrincipal.entrySet()) {
            String key = entrySet.getKey();
            res = verificarNT(key);
            if (!res) {
                ArrayList<String> value = entrySet.getValue();
                res = verificarTNT(value);
                if (!res) {
                    break;
                }
            } else {
                break;
            }
        }
        if (res) {
            JOptionPane.showMessageDialog(null, "esta bn");
        }
    }//GEN-LAST:event_btnVerificarActionPerformed

    private void txtnoTerminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnoTerminalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnoTerminalActionPerformed

    private void btnAniadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAniadirActionPerformed
        String noterminalAux = txtnoTerminal.getText().trim().toUpperCase();
        String cadena = txtTerminales.getText().trim();
        if (verificarRegla(noterminalAux, cadena))  anadir(noterminalAux, cadena);
        
    }//GEN-LAST:event_btnAniadirActionPerformed

    private void bttNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttNuevoActionPerformed
        bfIn = new StringBuffer();
        txtMain.setText(bfIn.toString());
        txtTerminales.setText("");
        txtnoTerminal.setText("");
        listaPrincipal = new HashMap<>();
        terminales.clear();
        noTerminales.clear();
    }//GEN-LAST:event_bttNuevoActionPerformed

    private void btnTerminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminalActionPerformed
        obtenerTerminales();
        ventanaTerminales ven1 = new ventanaTerminales(terminales);
        ven1.setVisible(true);
    }//GEN-LAST:event_btnTerminalActionPerformed

    private void btnNoTerminalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoTerminalesActionPerformed
        obtenerNoTerminales();

        ventanaNoTerminales ven = new ventanaNoTerminales(noTerminales);
        ven.setVisible(true);

        System.out.println(listaPrincipal.get("T"));
    }//GEN-LAST:event_btnNoTerminalesActionPerformed

    private void buttonAEFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAEFDActionPerformed
        ShowAFD nuevo = new ShowAFD(listaPrincipal);
        System.out.println("se pulso AEFD");
        try {
            nuevo.View();
        } catch (InterruptedException ex) {
            Logger.getLogger(GREditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAEFDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GREditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GREditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GREditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GREditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GREditor().setVisible(true);
            }
        });
    }

    private void anadir(String noterminalAux, String txtcadena) {
        //guardar en hashpmap
        //agarra el texto del cuadro NO TERMINAL
        //Si existe la llave y tiene un AL no volver a crear un array list
        //sino crearlo      
        if (!duplicado(noterminalAux, txtcadena)) {
            if (listaPrincipal.containsKey(noterminalAux)) {
                //si contiene la llave entonces añadir los elemtos al AL correspondiente
                ArrayList<String> alAux = listaPrincipal.get(noterminalAux);
                alAux.add(txtcadena); //añade al AL los nuevos elementos
                listaPrincipal.put(noterminalAux, alAux);

            } else { //si el noTerminal no esta en el Hashmap, colocarlo y crear su AL

                ArrayList<String> cadena = new ArrayList<>();
                cadena.add(txtcadena.toString());
                listaPrincipal.put(noterminalAux, cadena);

            }
            //actualiza la parte grafica
            bfIn = bfIn.append(noterminalAux + "---->" + txtcadena + "\n");
            txtMain.setText(bfIn.toString());
        } else {
            JOptionPane.showMessageDialog(null, "Regla duplicada");
            System.out.println(listaPrincipal);
        }
    }

    private boolean duplicado(String nt, String tnt) {
        boolean res = false;
        if (!listaPrincipal.isEmpty()) {
            for (Map.Entry<String, ArrayList<String>> entrySet : listaPrincipal.entrySet()) {
                String key = entrySet.getKey();
                if (key.equals(nt)) {
                    ArrayList<String> value = entrySet.getValue();
                    for (String e : value) {
                        if (e.equals(tnt)) {
                            res = true;
                        }
                    }
                }
            }
        }

        return res;
    }

    private void obtenerNoTerminales() {
        //obtener Keys del hashmap
        noTerminales = new ArrayList<>(listaPrincipal.keySet());
        for (int i = 0; i < noTerminales.size(); i++) {
            if (noTerminales.get(i).equals(epsilon + "")) {
                noTerminales.remove(i);
            }
        }
    }

    private void obtenerTerminales() {
        //obtenerNoTerminales();//con esto generamos los no terminales y ya no tomamos encuenta para los terminales
        for (Map.Entry<String, ArrayList<String>> entrySet : listaPrincipal.entrySet()) {
            //String key = entrySet.getKey();
            ArrayList<String> value = entrySet.getValue();
            for (String e : value)//e contiene la cadena de texto 
            {
                String[] aux;
                boolean res = false;
                e = e.trim();//elimina espacios adelante y atras de la cadena 
                aux = e.split(" ");
                for (String sa : aux)//sa es elemento de aux, aux=[S,a,s,B] ---> sa=S 
                {
                    res = noTerminales.contains(sa);//
                    if (!res) {
                        res = terminales.contains(sa);
                        if (!res) {
                            if (esGramaticaMinuscula(sa)) {
                                terminales.add(sa);
                            }
                        }
                    }
                }
            }
        }
    }

    private boolean esGramaticaMinuscula(String ss) {
        boolean res = false;
        for (int i = 0; i < ss.length(); i++) //
        {
            if (!Character.isUpperCase(ss.charAt(i)) || ss.charAt(i) == epsilon) {
                if (Character.isLowerCase(ss.charAt(i)) || ss.charAt(i) == epsilon || ss.charAt(i) == ' ' || ss.charAt(i) == '*' || ss.charAt(i) == '+' || ss.charAt(i) == '?') {
                    res = true;
                }
            }
        }
        return res;
    }

    private boolean verificarNT(String l) {
        boolean res = noTerminales.contains(l);
        boolean res1 = contieneMayusMinus(l);
        if ((!res) && (res1)) {
            JOptionPane.showMessageDialog(null, "no pertenece a la gramatica");
        }
        return res;
    }

    private boolean contieneMayusMinus(String l) {
        boolean res = false;
        for (int i = 0; i < l.length(); i++) {
            if ((Character.isUpperCase(l.charAt(i)) && (l.charAt(i) != 'E') || (Character.isLowerCase(l.charAt(i))))) {
                res = true;
            }
        }
        return res;
    }

    private boolean verificarTNT(ArrayList<String> value) {
        obtenerTerminales();
        boolean res = true;
        for (String e : value) {
            e = e.trim();
            String aux[] = e.split(" ");
            for (String e2 : aux) {
                res = terminales.contains(e2);
                if (!res) {
                    res = noTerminales.contains(e2);
                    if (!res) {
                        res = false;
                        JOptionPane.showMessageDialog(null, "no pertenece a la gramatica");
                        break;
                    }
                }
            }
            if (!res) {
                break;
            }
        }
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TxtCorrector;
    private javax.swing.JButton btnAniadir;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnNoTerminales;
    private javax.swing.JButton btnRecuperar;
    private javax.swing.JButton btnTerminal;
    private javax.swing.JButton btnVerificar;
    private javax.swing.JButton bttNuevo;
    private javax.swing.JButton buttonAEFD;
    private javax.swing.JButton buttonAEFND;
    private javax.swing.JButton buttonER;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane txtMain;
    private javax.swing.JTextField txtTerminales;
    private javax.swing.JTextField txtnoTerminal;
    // End of variables declaration//GEN-END:variables

    private boolean verificarRegla(String noterminalAux, String cadena) {
        boolean n1 = false;
        boolean n2 = false;
        //boolean res= false;
        String NT = noterminalAux;
        String T = cadena;
        if (!NT.isEmpty()) {
            if (NT.length() == 1) {
                Character Nn = NT.toCharArray()[0];
                if (Nn.isUpperCase(Nn) == true && Nn != 'E') {
                    n1 = true;
                }
            }
        } //hasta aquí comprueba el lado izq
        //comprueb el lado derecho:
        if (!T.isEmpty()) {
            if (T.length() == 1) {
                Character Nnt = T.toCharArray()[0];
                if (Nnt.isLowerCase(Nnt) == true) {
                    n2 = true;
                } else if (Nnt == 'E') {
                    n2 = true;
                }
            } else { //si el string es mas grande que 'a'

                if (T.contains(" ")) { //si tiene dos elementos
                    String[] list = T.split(" ");
                    if (list.length == 2) {
                        if (esPalabra(list[0]) && Character.isUpperCase(list[1].toCharArray()[0]) || esPalabra(list[1]) && Character.isUpperCase(list[0].toCharArray()[0])) {
                            n2 = true;
                        }
                    }
                } else {//palabra larga como hola
                    n2 = esPalabra(T);
                }

            }
        }

        if (n1 && n2) {
            TxtCorrector.setText("/");
        } else {
            TxtCorrector.setText("X");
        }
        return n1 && n2;
    }

    private boolean esPalabra(String T) {
        boolean res = false;
        char[] chars = T.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            res = Character.isLowerCase(chars[i]);
        }
        return res;
    }
}
